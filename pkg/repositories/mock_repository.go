// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/repositories/interfaces.go

// Package repositories is a generated GoMock package.
package repositories

import (
	reflect "reflect"
	time "time"

	models "github.com/dormunis/punch/pkg/models"
	gomock "github.com/golang/mock/gomock"
)

// MockSessionRepository is a mock of SessionRepository interface.
type MockSessionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSessionRepositoryMockRecorder
}

// MockSessionRepositoryMockRecorder is the mock recorder for MockSessionRepository.
type MockSessionRepositoryMockRecorder struct {
	mock *MockSessionRepository
}

// NewMockSessionRepository creates a new mock instance.
func NewMockSessionRepository(ctrl *gomock.Controller) *MockSessionRepository {
	mock := &MockSessionRepository{ctrl: ctrl}
	mock.recorder = &MockSessionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionRepository) EXPECT() *MockSessionRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockSessionRepository) Delete(session *models.Session, dryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", session, dryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionRepositoryMockRecorder) Delete(session, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionRepository)(nil).Delete), session, dryRun)
}

// GetAllSessions mocks base method.
func (m *MockSessionRepository) GetAllSessions(client models.Client) (*[]models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessions", client)
	ret0, _ := ret[0].(*[]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessions indicates an expected call of GetAllSessions.
func (mr *MockSessionRepositoryMockRecorder) GetAllSessions(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessions", reflect.TypeOf((*MockSessionRepository)(nil).GetAllSessions), client)
}

// GetAllSessionsAllClients mocks base method.
func (m *MockSessionRepository) GetAllSessionsAllClients() (*[]models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessionsAllClients")
	ret0, _ := ret[0].(*[]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessionsAllClients indicates an expected call of GetAllSessionsAllClients.
func (mr *MockSessionRepositoryMockRecorder) GetAllSessionsAllClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessionsAllClients", reflect.TypeOf((*MockSessionRepository)(nil).GetAllSessionsAllClients))
}

// GetAllSessionsBetweenDates mocks base method.
func (m *MockSessionRepository) GetAllSessionsBetweenDates(start, end time.Time) (*[]models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSessionsBetweenDates", start, end)
	ret0, _ := ret[0].(*[]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSessionsBetweenDates indicates an expected call of GetAllSessionsBetweenDates.
func (mr *MockSessionRepositoryMockRecorder) GetAllSessionsBetweenDates(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSessionsBetweenDates", reflect.TypeOf((*MockSessionRepository)(nil).GetAllSessionsBetweenDates), start, end)
}

// GetLastSessions mocks base method.
func (m *MockSessionRepository) GetLastSessions(arg0 uint32, arg1 *models.Client) (*[]models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastSessions", arg0, arg1)
	ret0, _ := ret[0].(*[]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastSessions indicates an expected call of GetLastSessions.
func (mr *MockSessionRepositoryMockRecorder) GetLastSessions(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastSessions", reflect.TypeOf((*MockSessionRepository)(nil).GetLastSessions), arg0, arg1)
}

// GetLatestSession mocks base method.
func (m *MockSessionRepository) GetLatestSession() (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSession")
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSession indicates an expected call of GetLatestSession.
func (mr *MockSessionRepositoryMockRecorder) GetLatestSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSession", reflect.TypeOf((*MockSessionRepository)(nil).GetLatestSession))
}

// GetLatestSessionOnSpecificDate mocks base method.
func (m *MockSessionRepository) GetLatestSessionOnSpecificDate(date time.Time, client models.Client) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSessionOnSpecificDate", date, client)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSessionOnSpecificDate indicates an expected call of GetLatestSessionOnSpecificDate.
func (mr *MockSessionRepositoryMockRecorder) GetLatestSessionOnSpecificDate(date, client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSessionOnSpecificDate", reflect.TypeOf((*MockSessionRepository)(nil).GetLatestSessionOnSpecificDate), date, client)
}

// GetLatestSessionOnSpecificDateAllClients mocks base method.
func (m *MockSessionRepository) GetLatestSessionOnSpecificDateAllClients(date time.Time) (*[]models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSessionOnSpecificDateAllClients", date)
	ret0, _ := ret[0].(*[]models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestSessionOnSpecificDateAllClients indicates an expected call of GetLatestSessionOnSpecificDateAllClients.
func (mr *MockSessionRepositoryMockRecorder) GetLatestSessionOnSpecificDateAllClients(date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSessionOnSpecificDateAllClients", reflect.TypeOf((*MockSessionRepository)(nil).GetLatestSessionOnSpecificDateAllClients), date)
}

// GetSessionByID mocks base method.
func (m *MockSessionRepository) GetSessionByID(id uint32) (*models.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSessionByID", id)
	ret0, _ := ret[0].(*models.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSessionByID indicates an expected call of GetSessionByID.
func (mr *MockSessionRepositoryMockRecorder) GetSessionByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSessionByID", reflect.TypeOf((*MockSessionRepository)(nil).GetSessionByID), id)
}

// Insert mocks base method.
func (m *MockSessionRepository) Insert(session *models.Session, dryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", session, dryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockSessionRepositoryMockRecorder) Insert(session, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockSessionRepository)(nil).Insert), session, dryRun)
}

// Update mocks base method.
func (m *MockSessionRepository) Update(session *models.Session, dryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", session, dryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSessionRepositoryMockRecorder) Update(session, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSessionRepository)(nil).Update), session, dryRun)
}

// Upsert mocks base method.
func (m *MockSessionRepository) Upsert(session *models.Session, dryRun bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", session, dryRun)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upsert indicates an expected call of Upsert.
func (mr *MockSessionRepositoryMockRecorder) Upsert(session, dryRun any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockSessionRepository)(nil).Upsert), session, dryRun)
}

// MockClientRepository is a mock of ClientRepository interface.
type MockClientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockClientRepositoryMockRecorder
}

// MockClientRepositoryMockRecorder is the mock recorder for MockClientRepository.
type MockClientRepositoryMockRecorder struct {
	mock *MockClientRepository
}

// NewMockClientRepository creates a new mock instance.
func NewMockClientRepository(ctrl *gomock.Controller) *MockClientRepository {
	mock := &MockClientRepository{ctrl: ctrl}
	mock.recorder = &MockClientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientRepository) EXPECT() *MockClientRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockClientRepository) Delete(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockClientRepositoryMockRecorder) Delete(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClientRepository)(nil).Delete), client)
}

// GetAll mocks base method.
func (m *MockClientRepository) GetAll() ([]models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockClientRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockClientRepository)(nil).GetAll))
}

// GetByName mocks base method.
func (m *MockClientRepository) GetByName(name string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByName", name)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockClientRepositoryMockRecorder) GetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockClientRepository)(nil).GetByName), name)
}

// Insert mocks base method.
func (m *MockClientRepository) Insert(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockClientRepositoryMockRecorder) Insert(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockClientRepository)(nil).Insert), client)
}

// Rename mocks base method.
func (m *MockClientRepository) Rename(client *models.Client, newName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", client, newName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockClientRepositoryMockRecorder) Rename(client, newName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockClientRepository)(nil).Rename), client, newName)
}

// SafeGetByName mocks base method.
func (m *MockClientRepository) SafeGetByName(name string) (*models.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SafeGetByName", name)
	ret0, _ := ret[0].(*models.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SafeGetByName indicates an expected call of SafeGetByName.
func (mr *MockClientRepositoryMockRecorder) SafeGetByName(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SafeGetByName", reflect.TypeOf((*MockClientRepository)(nil).SafeGetByName), name)
}

// Update mocks base method.
func (m *MockClientRepository) Update(client *models.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", client)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockClientRepositoryMockRecorder) Update(client any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientRepository)(nil).Update), client)
}
